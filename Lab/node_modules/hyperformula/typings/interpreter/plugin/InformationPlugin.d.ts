/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
import { CellError, SimpleCellAddress } from '../../Cell';
import { ProcedureAst } from '../../parser';
import { InternalScalarValue } from '../InterpreterValue';
import { ArgumentTypes, FunctionPlugin } from './FunctionPlugin';
/**
 * Interpreter plugin containing information functions
 */
export declare class InformationPlugin extends FunctionPlugin {
    static implementedFunctions: {
        COLUMN: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
                optional: boolean;
            }[];
            isDependentOnSheetStructureChange: boolean;
            doesNotNeedArgumentsToBeComputed: boolean;
        };
        COLUMNS: {
            method: string;
            isDependentOnSheetStructureChange: boolean;
            doesNotNeedArgumentsToBeComputed: boolean;
        };
        ISBINARY: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        ISERR: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        ISFORMULA: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
            doesNotNeedArgumentsToBeComputed: boolean;
        };
        ISNA: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        ISREF: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        ISERROR: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        ISBLANK: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        ISNUMBER: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        ISLOGICAL: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        ISTEXT: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        ISNONTEXT: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        INDEX: {
            method: string;
            parameters: ({
                argumentType: ArgumentTypes;
                defaultValue?: undefined;
            } | {
                argumentType: ArgumentTypes;
                defaultValue: number;
            })[];
        };
        NA: {
            method: string;
        };
        ROW: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
                optional: boolean;
            }[];
            isDependentOnSheetStructureChange: boolean;
            doesNotNeedArgumentsToBeComputed: boolean;
        };
        ROWS: {
            method: string;
            isDependentOnSheetStructureChange: boolean;
            doesNotNeedArgumentsToBeComputed: boolean;
        };
        SHEET: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
            doesNotNeedArgumentsToBeComputed: boolean;
        };
        SHEETS: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
            doesNotNeedArgumentsToBeComputed: boolean;
        };
    };
    /**
     * Corresponds to ISBINARY(value)
     *
     * Returns true if provided value is a valid binary number
     *
     * @param ast
     * @param formulaAddress
     */
    isbinary(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    /**
     * Corresponds to ISERR(value)
     *
     * Returns true if provided value is an error except #N/A!
     *
     * @param ast
     * @param formulaAddress
     */
    iserr(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    /**
     * Corresponds to ISERROR(value)
     *
     * Checks whether provided value is an error
     *
     * @param ast
     * @param formulaAddress
     */
    iserror(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    /**
     * Corresponds to ISFORMULA(value)
     *
     * Checks whether referenced cell is a formula
     *
     * @param ast
     * @param formulaAddress
     */
    isformula(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    /**
     * Corresponds to ISBLANK(value)
     *
     * Checks whether provided cell reference is empty
     *
     * @param ast
     * @param formulaAddress
     */
    isblank(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    /**
     * Corresponds to ISNA(value)
     *
     * Returns true if provided value is #N/A! error
     *
     * @param ast
     * @param formulaAddress
     */
    isna(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    /**
     * Corresponds to ISNUMBER(value)
     *
     * Checks whether provided cell reference is a number
     *
     * @param ast
     * @param formulaAddress
     */
    isnumber(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    /**
     * Corresponds to ISLOGICAL(value)
     *
     * Checks whether provided cell reference is of logical type
     *
     * @param ast
     * @param formulaAddress
     */
    islogical(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    /**
     * Corresponds to ISREF(value)
     *
     * Returns true if provided value is #REF! error
     *
     * @param ast
     * @param formulaAddress
     */
    isref(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    /**
     * Corresponds to ISTEXT(value)
     *
     * Checks whether provided cell reference is of logical type
     *
     * @param ast
     * @param formulaAddress
     */
    istext(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    /**
     * Corresponds to ISNONTEXT(value)
     *
     * Checks whether provided cell reference is of logical type
     *
     * @param ast
     * @param formulaAddress
     */
    isnontext(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    /**
     * Corresponds to COLUMN(reference)
     *
     * Returns column number of a reference or a formula cell if reference not provided
     *
     * @param ast
     * @param formulaAddress
     */
    column(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    /**
     * Corresponds to COLUMNS(range)
     *
     * Returns number of columns in provided range of cells
     *
     * @param ast
     * @param formulaAddress
     */
    columns(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    /**
     * Corresponds to ROW(reference)
     *
     * Returns row number of a reference or a formula cell if reference not provided
     *
     * @param ast
     * @param formulaAddress
     */
    row(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    /**
     * Corresponds to ROWS(range)
     *
     * Returns number of rows in provided range of cells
     *
     * @param ast
     * @param formulaAddress
     */
    rows(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    /**
     * Corresponds to INDEX(range;)
     *
     * Returns number of rows in provided range of cells
     *
     * @param ast
     * @param formulaAddress
     */
    index(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    /**
     * Corresponds to NA()
     *
     * Returns #N/A!
     *
     * @param _ast
     * @param _formulaAddress
     */
    na(_ast: ProcedureAst, _formulaAddress: SimpleCellAddress): CellError;
    /**
     * Corresponds to SHEET(value)
     *
     * Returns sheet number of a given value or a formula sheet number if no argument is provided
     *
     * @param ast
     * @param formulaAddress
     * */
    sheet(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    /**
     * Corresponds to SHEETS(value)
     *
     * Returns number of sheet of a given reference or number of all sheets in workbook when no argument is provided.
     * It returns always 1 for a valid reference as 3D references are not supported.
     *
     * @param ast
     * @param formulaAddress
     * */
    sheets(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
}

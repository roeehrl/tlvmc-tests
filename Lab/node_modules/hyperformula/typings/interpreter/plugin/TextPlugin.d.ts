/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
import { SimpleCellAddress } from '../../Cell';
import { ProcedureAst } from '../../parser';
import { InternalScalarValue } from '../InterpreterValue';
import { ArgumentTypes, FunctionPlugin } from './FunctionPlugin';
/**
 * Interpreter plugin containing text-specific functions
 */
export declare class TextPlugin extends FunctionPlugin {
    static implementedFunctions: {
        CONCATENATE: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
            repeatLastArgs: number;
            expandRanges: boolean;
        };
        EXACT: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        SPLIT: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        LEN: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        LOWER: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        MID: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        TRIM: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        T: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        PROPER: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        CLEAN: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        REPT: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        RIGHT: {
            method: string;
            parameters: ({
                argumentType: ArgumentTypes;
                defaultValue?: undefined;
            } | {
                argumentType: ArgumentTypes;
                defaultValue: number;
            })[];
        };
        LEFT: {
            method: string;
            parameters: ({
                argumentType: ArgumentTypes;
                defaultValue?: undefined;
            } | {
                argumentType: ArgumentTypes;
                defaultValue: number;
            })[];
        };
        REPLACE: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        SEARCH: {
            method: string;
            parameters: ({
                argumentType: ArgumentTypes;
                defaultValue?: undefined;
            } | {
                argumentType: ArgumentTypes;
                defaultValue: number;
            })[];
        };
        SUBSTITUTE: {
            method: string;
            parameters: ({
                argumentType: ArgumentTypes;
                optionalArg?: undefined;
            } | {
                argumentType: ArgumentTypes;
                optionalArg: boolean;
            })[];
        };
        FIND: {
            method: string;
            parameters: ({
                argumentType: ArgumentTypes;
                defaultValue?: undefined;
            } | {
                argumentType: ArgumentTypes;
                defaultValue: number;
            })[];
        };
        UPPER: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
    };
    /**
     * Corresponds to CONCATENATE(value1, [value2, ...])
     *
     * Concatenates provided arguments to one string.
     *
     * @param args
     * @param formulaAddress
     */
    concatenate(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    /**
     * Corresponds to SPLIT(string, index)
     *
     * Splits provided string using space separator and returns chunk at zero-based position specified by second argument
     *
     * @param ast
     * @param formulaAddress
     */
    split(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    len(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    lower(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    trim(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    proper(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    clean(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    exact(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    rept(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    right(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    left(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    mid(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    replace(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    search(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    substitute(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    find(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    t(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    upper(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
}

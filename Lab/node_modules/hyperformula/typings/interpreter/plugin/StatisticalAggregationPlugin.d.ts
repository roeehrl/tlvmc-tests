/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
import { SimpleCellAddress } from '../../Cell';
import { ProcedureAst } from '../../parser';
import { InternalScalarValue } from '../InterpreterValue';
import { ArgumentTypes, FunctionPlugin } from './FunctionPlugin';
export declare class StatisticalAggregationPlugin extends FunctionPlugin {
    static implementedFunctions: {
        AVEDEV: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
            repeatLastArgs: number;
        };
        DEVSQ: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
            repeatLastArgs: number;
        };
        GEOMEAN: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
            repeatLastArgs: number;
        };
        HARMEAN: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
            repeatLastArgs: number;
        };
        CORREL: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        RSQ: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        'COVARIANCE.P': {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        'COVARIANCE.S': {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        'Z.TEST': {
            method: string;
            parameters: ({
                argumentType: ArgumentTypes;
                optionalArg?: undefined;
            } | {
                argumentType: ArgumentTypes;
                optionalArg: boolean;
            })[];
        };
        'F.TEST': {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        STEYX: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        SLOPE: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        'CHISQ.TEST': {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        'T.TEST': {
            method: string;
            parameters: ({
                argumentType: ArgumentTypes;
                minValue?: undefined;
                maxValue?: undefined;
            } | {
                argumentType: ArgumentTypes;
                minValue: number;
                maxValue: number;
            })[];
        };
        SKEW: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
            repeatLastArgs: number;
        };
        'SKEW.P': {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
            repeatLastArgs: number;
        };
    };
    static aliases: {
        COVAR: string;
        FTEST: string;
        PEARSON: string;
        ZTEST: string;
        CHITEST: string;
        TTEST: string;
        COVARIANCEP: string;
        COVARIANCES: string;
        SKEWP: string;
    };
    avedev(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    devsq(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    geomean(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    harmean(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    correl(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    rsq(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    covariancep(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    covariances(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    ztest(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    ftest(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    steyx(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    slope(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    chisqtest(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    ttest(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    skew(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    skewp(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
}

"use strict";

exports.__esModule = true;
exports.Exporter = exports.ExportedNamedExpressionChange = exports.ExportedCellChange = void 0;

require("core-js/modules/es.function.name.js");

require("core-js/modules/es.math.log10.js");

var _Cell = require("./Cell");

var _CellValue = require("./CellValue");

var _errorMessage = require("./error-message");

var _InterpreterValue = require("./interpreter/InterpreterValue");

var _SimpleRangeValue = require("./interpreter/SimpleRangeValue");

var _NamedExpressions = require("./NamedExpressions");

var _addressRepresentationConverters = require("./parser/addressRepresentationConverters");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * A list of cells which values changed after the operation, their absolute addresses and new values.
 */
var ExportedCellChange = /*#__PURE__*/function () {
  function ExportedCellChange(address, newValue) {
    _classCallCheck(this, ExportedCellChange);

    this.address = address;
    this.newValue = newValue;
  }

  _createClass(ExportedCellChange, [{
    key: "col",
    get: function get() {
      return this.address.col;
    }
  }, {
    key: "row",
    get: function get() {
      return this.address.row;
    }
  }, {
    key: "sheet",
    get: function get() {
      return this.address.sheet;
    }
  }, {
    key: "value",
    get: function get() {
      return this.newValue;
    }
  }]);

  return ExportedCellChange;
}();

exports.ExportedCellChange = ExportedCellChange;

var ExportedNamedExpressionChange = function ExportedNamedExpressionChange(name, newValue) {
  _classCallCheck(this, ExportedNamedExpressionChange);

  this.name = name;
  this.newValue = newValue;
};

exports.ExportedNamedExpressionChange = ExportedNamedExpressionChange;

var Exporter = /*#__PURE__*/function () {
  function Exporter(config, namedExpressions, sheetIndexMapping) {
    _classCallCheck(this, Exporter);

    this.config = config;
    this.namedExpressions = namedExpressions;
    this.sheetIndexMapping = sheetIndexMapping;
  }

  _createClass(Exporter, [{
    key: "exportChange",
    value: function exportChange(change) {
      if (change.sheet === _NamedExpressions.NamedExpressions.SHEET_FOR_WORKBOOK_EXPRESSIONS) {
        var namedExpression = this.namedExpressions.namedExpressionInAddress(change.row);

        if (!namedExpression) {
          throw 'Missing named expression';
        }

        return new ExportedNamedExpressionChange(namedExpression.displayName, this.exportValue(change.value));
      } else {
        return new ExportedCellChange((0, _Cell.simpleCellAddress)(change.sheet, change.col, change.row), this.exportValue(change.value));
      }
    }
  }, {
    key: "exportValue",
    value: function exportValue(value) {
      if (value instanceof _SimpleRangeValue.SimpleRangeValue) {
        return this.detailedError(new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.ScalarExpected));
      } else if (this.config.smartRounding && (0, _InterpreterValue.isExtendedNumber)(value)) {
        return this.cellValueRounding((0, _InterpreterValue.getRawValue)(value));
      } else if (value instanceof _Cell.CellError) {
        return this.detailedError(value);
      } else if (value === _InterpreterValue.EmptyValue) {
        return null;
      } else {
        return (0, _InterpreterValue.getRawValue)(value);
      }
    }
  }, {
    key: "detailedError",
    value: function detailedError(error) {
      var _a;

      var address = undefined;
      var originAddress = error.address;

      if (originAddress !== undefined) {
        if (originAddress.sheet === _NamedExpressions.NamedExpressions.SHEET_FOR_WORKBOOK_EXPRESSIONS) {
          address = (_a = this.namedExpressions.namedExpressionInAddress(originAddress.row)) === null || _a === void 0 ? void 0 : _a.displayName;
        } else {
          address = (0, _addressRepresentationConverters.simpleCellAddressToString)(this.sheetIndexMapping, originAddress, -1);
        }
      }

      return new _CellValue.DetailedCellError(error, this.config.translationPackage.getErrorTranslation(error.type), address);
    }
  }, {
    key: "cellValueRounding",
    value: function cellValueRounding(value) {
      if (value === 0) {
        return value;
      }

      var magnitudeMultiplierExponent = Math.floor(Math.log10(Math.abs(value)));
      var placesMultiplier = Math.pow(10, this.config.precisionRounding - magnitudeMultiplierExponent);

      if (value < 0) {
        return -Math.round(-value * placesMultiplier) / placesMultiplier;
      } else {
        return Math.round(value * placesMultiplier) / placesMultiplier;
      }
    }
  }]);

  return Exporter;
}();

exports.Exporter = Exporter;
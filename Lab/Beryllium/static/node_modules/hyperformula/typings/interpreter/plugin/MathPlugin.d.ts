/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
import { SimpleCellAddress } from '../../Cell';
import { ProcedureAst } from '../../parser';
import { InternalScalarValue } from '../InterpreterValue';
import { ArgumentTypes, FunctionPlugin } from './FunctionPlugin';
export declare class MathPlugin extends FunctionPlugin {
    static implementedFunctions: {
        FACT: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
                minValue: number;
                maxValue: number;
            }[];
        };
        FACTDOUBLE: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
                minValue: number;
                maxValue: number;
            }[];
        };
        COMBIN: {
            method: string;
            parameters: ({
                argumentType: ArgumentTypes;
                minValue: number;
                lessThan: number;
            } | {
                argumentType: ArgumentTypes;
                minValue: number;
                lessThan?: undefined;
            })[];
        };
        COMBINA: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
                minValue: number;
            }[];
        };
        GCD: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
            repeatLastArgs: number;
        };
        LCM: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
            repeatLastArgs: number;
        };
        MROUND: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        MULTINOMIAL: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
            repeatLastArgs: number;
            expandRanges: boolean;
        };
        QUOTIENT: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        SERIESSUM: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        SIGN: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        SUMX2MY2: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        SUMX2PY2: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        SUMXMY2: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
    };
    fact(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    factdouble(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    combin(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    combina(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    gcd(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    lcm(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    mround(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    multinomial(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    quotient(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    seriessum(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    sign(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    sumx2my2(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    sumx2py2(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    sumxmy2(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
}

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
import { SimpleCellAddress } from '../../Cell';
import { ProcedureAst } from '../../parser';
import { InterpreterValue } from '../InterpreterValue';
import { ArgumentTypes, FunctionPlugin } from './FunctionPlugin';
import { Interpreter } from '../Interpreter';
export declare type KernelRunShortcut = (...args: any[]) => number[][];
export declare type KernelFunction = ((this: KernelFunctionThis, ...args: any[]) => number);
export interface KernelFunctionThis {
    thread: {
        x: number;
        y?: number;
    };
}
export declare class MatrixPlugin extends FunctionPlugin {
    static implementedFunctions: {
        MMULT: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        TRANSPOSE: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        MAXPOOL: {
            method: string;
            parameters: ({
                argumentType: ArgumentTypes;
                optionalArg?: undefined;
            } | {
                argumentType: ArgumentTypes;
                optionalArg: boolean;
            })[];
        };
        MEDIANPOOL: {
            method: string;
            parameters: ({
                argumentType: ArgumentTypes;
                optionalArg?: undefined;
            } | {
                argumentType: ArgumentTypes;
                optionalArg: boolean;
            })[];
        };
    };
    private readonly createKernel;
    constructor(interpreter: Interpreter);
    mmult(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InterpreterValue;
    maxpool(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InterpreterValue;
    medianpool(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InterpreterValue;
    transpose(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InterpreterValue;
    private createCpuKernel;
    private createGpuJsKernel;
}

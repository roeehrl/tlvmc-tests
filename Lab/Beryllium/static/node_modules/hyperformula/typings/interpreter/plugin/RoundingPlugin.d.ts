/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
import { SimpleCellAddress } from '../../Cell';
import { ProcedureAst } from '../../parser';
import { InternalScalarValue } from '../InterpreterValue';
import { ArgumentTypes, FunctionPlugin } from './FunctionPlugin';
export declare function findNextOddNumber(arg: number): number;
export declare function findNextEvenNumber(arg: number): number;
export declare class RoundingPlugin extends FunctionPlugin {
    static implementedFunctions: {
        ROUNDUP: {
            method: string;
            parameters: ({
                argumentType: ArgumentTypes;
                defaultValue?: undefined;
            } | {
                argumentType: ArgumentTypes;
                defaultValue: number;
            })[];
        };
        ROUNDDOWN: {
            method: string;
            parameters: ({
                argumentType: ArgumentTypes;
                defaultValue?: undefined;
            } | {
                argumentType: ArgumentTypes;
                defaultValue: number;
            })[];
        };
        ROUND: {
            method: string;
            parameters: ({
                argumentType: ArgumentTypes;
                defaultValue?: undefined;
            } | {
                argumentType: ArgumentTypes;
                defaultValue: number;
            })[];
        };
        TRUNC: {
            method: string;
            parameters: ({
                argumentType: ArgumentTypes;
                defaultValue?: undefined;
            } | {
                argumentType: ArgumentTypes;
                defaultValue: number;
            })[];
        };
        INT: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        EVEN: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        ODD: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        'CEILING.MATH': {
            method: string;
            parameters: ({
                argumentType: ArgumentTypes;
                defaultValue?: undefined;
            } | {
                argumentType: ArgumentTypes;
                defaultValue: number;
            })[];
        };
        CEILING: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        'CEILING.PRECISE': {
            method: string;
            parameters: ({
                argumentType: ArgumentTypes;
                defaultValue?: undefined;
            } | {
                argumentType: ArgumentTypes;
                defaultValue: number;
            })[];
        };
        'FLOOR.MATH': {
            method: string;
            parameters: ({
                argumentType: ArgumentTypes;
                defaultValue?: undefined;
            } | {
                argumentType: ArgumentTypes;
                defaultValue: number;
            })[];
        };
        FLOOR: {
            method: string;
            parameters: {
                argumentType: ArgumentTypes;
            }[];
        };
        'FLOOR.PRECISE': {
            method: string;
            parameters: ({
                argumentType: ArgumentTypes;
                defaultValue?: undefined;
            } | {
                argumentType: ArgumentTypes;
                defaultValue: number;
            })[];
        };
    };
    static aliases: {
        'ISO.CEILING': string;
    };
    roundup(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    rounddown(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    round(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    trunc(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    intFunc(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    even(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    odd(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    ceilingmath(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    ceiling(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    ceilingprecise(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    floormath(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    floor(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
    floorprecise(ast: ProcedureAst, formulaAddress: SimpleCellAddress): InternalScalarValue;
}
